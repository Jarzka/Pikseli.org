{"version":3,"sources":["stylefy/impl/utils.cljs"],"mappings":";;;;;;;;AASA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAACC,AAAMC,AAAOF,AAAM,AAAA,AAAAG,AAACC;AAAD,AAAS,AAAAC,AAAK,AAAAF,AAACG;AAAN,AAAA,AAAAD;AACK,AAAA,AAACE,AAAiB,AAAAJ,AAACG;;AADxBD;;AAED,AAACG,AAAKR;;AAEpC,AAAA,AAAMS,AAAkBC;AAAxB,AAEE,AAAI,AAAWC,AAAcD,AACzB,AAAWE,AAAeF,AAC1B,AAAWG,AAAkBH","names":["stylefy.impl.utils/filter-css-props","props","cljs.core.apply","cljs.core/dissoc","p1__37770#","cljs.core.filter","and__4109__auto__","cljs.core/namespace","clojure.string/starts-with?","cljs.core/keys","stylefy.impl.utils/is-garden-value?","value","garden.types/CSSUnit","garden.color/CSSColor","garden.types/CSSFunction"],"sourcesContent":["(ns stylefy.impl.utils\n  (:require [dommy.core :as dommy]\n            [garden.core :refer [css]]\n            [garden.color :as color]\n            [garden.types :as types]\n            [garden.stylesheet :refer [at-media at-keyframes at-font-face]]\n            [clojure.string :as str])\n  (:require-macros [reagent.ratom :refer [run!]]))\n\n(defn filter-css-props\n  \"Removes stylefy's namespaced keywords from the given map.\"\n  [props]\n  (apply dissoc props (filter #(and (namespace %)\n                                    (str/starts-with? (namespace %) \"stylefy\"))\n                              (keys props))))\n\n(defn is-garden-value? [value]\n  ; Note: types/CSSAtRule is not included since it is a selector, not a valid CSS value.\n  (or (instance? types/CSSUnit value)\n      (instance? color/CSSColor value)\n      (instance? types/CSSFunction value)))"]}