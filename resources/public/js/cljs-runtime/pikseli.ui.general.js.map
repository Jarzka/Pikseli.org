{"version":3,"sources":["pikseli/ui/general.cljs"],"mappings":"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","names":["pikseli.ui.general/with-unique-keys","content","cljs.core.map_indexed","index","element","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","pikseli.ui.general/social-media-link","p__27855","map__27856","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq27853","G__27854","cljs.core/first","cljs.core/next","self__4717__auto__","some-type","options","stylefy.core.use_style","cljs.core.merge_with","cljs.core/merge","pikseli.styles.global/a-some","pikseli.styles.global/a-some-before","cljs.core.dissoc","pikseli.ui.general/button-link","p__27860","map__27861","seq27858","G__27859","button-icon","extra-styles","cljs.core.merge","pikseli.styles.global/a-button","pikseli.ui.general/button","p__27865","map__27866","seq27863","G__27864","pikseli.ui.general/blockquote","text","person","pikseli.ui.general/loader-dark","p__27868","map__27869","pikseli.ui.general/loader-light","pikseli.styles.global/text-center","pikseli.styles.global/text-smaller"],"sourcesContent":["(ns pikseli.ui.general\r\n  (:require [stylefy.core :as stylefy :refer [use-style]]\r\n            [pikseli.styles.global :as g-styles]))\r\n\r\n(defn- with-unique-keys [content]\r\n  (map-indexed\r\n    (fn [index element]\r\n      ^{:key index}\r\n      element)\r\n    content))\r\n\r\n(defn social-media-link [{:keys [some-type] :as options} & content]\r\n  [:a (use-style (merge-with merge\r\n                             g-styles/a-some\r\n                             (g-styles/a-some-before some-type))\r\n                 (dissoc options :some-type))\r\n   content])\r\n\r\n(defn button-link [{:keys [button-icon extra-styles] :as options} & content]\r\n  [:a (use-style (merge\r\n                   g-styles/a-button\r\n                   extra-styles)\r\n                 (dissoc options :button-icon :extra-styles))\r\n   content])\r\n\r\n(defn button [{:keys [button-icon extra-styles] :as options} & content]\r\n  [:button (use-style (merge\r\n                        g-styles/a-button\r\n                        extra-styles)\r\n                      (dissoc options :button-icon :extra-styles))\r\n   content])\r\n\r\n(defn blockquote [text person]\r\n  [:blockquote\r\n   [:p (str \"\\\"\" text \"\\\"\")\r\n    [:br] (str \"- \" person)]])\r\n\r\n(defn loader-dark []\r\n  [:img\r\n   (use-style {:display :block\r\n               :width \"40px\"\r\n               :margin-left :auto\r\n               :margin-right :auto\r\n               :margin-top \"0.5rem\"\r\n               :margin-bottom \"0.5rem\"}\r\n              {:src \"/images/loading_dark.gif\"})])\r\n\r\n(defn loader-light [{:keys [text]}]\r\n  [:div\r\n   [:img (use-style {:width \"32px\"\r\n                     :display :block\r\n                     :margin-top \"1rem\"\r\n                     :margin-bottom \"1rem\"\r\n                     :margin-left :auto\r\n                     :margin-right :auto}\r\n                    {:src \"/images/loading_light.gif\"})]\r\n   (when text\r\n     [:div (use-style (merge\r\n                        g-styles/text-center\r\n                        g-styles/text-smaller))\r\n      text])])"]}