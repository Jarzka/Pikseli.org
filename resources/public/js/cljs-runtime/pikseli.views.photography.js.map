{"version":3,"sources":["pikseli/views/photography.cljs"],"mappings":";;;;;;;;;AAWA,AAAKA,AAAqB,AAAA,AAACC;AAE3B,AAAA,AAAMC,AAAYC;AAAlB,AACE,AAAMC,AAAmB,AAAA,AAAG,AAACC,AAAMC;AAC7BC,AAAW,AAAA,AAAKJ;AAChBK,AAAiB,AAAI,AAAGD,AAAWH,AAAoBA,AAAmBG;AAFhF,AAGEC;;AAEJ,AAAA,AAAMC,AAAgBN;AAAtB,AACE,AAAMI,AAAW,AAAA,AAAKJ;AAChBK,AAAiB,AAAA,AAAI,AAAA,AAAGD,AAAgBA;AAD9C,AAEEC;;AAEJ,AAAA,AAAME;AAAN,AACE,AAAMH,AAAW,AAAA,AAAAI,AAACT,AAAYF;AAA9B,AACE,AAAI,AAAA,AAAAW,AAACC,AAAKL,AAAYP;AACpB,AAAI,AAACa,AAAOb,AAAqBO;;AAAjC;;AADF;;;AAKJ,AAAA,AAAMO;AAAN,AACE,AAAMP,AAAW,AAAA,AAAAI,AAACF,AAAgBT;AAAlC,AACE,AAAI,AAAA,AAAAW,AAACC,AAAKL,AAAYP;AACpB,AAAI,AAACa,AAAOb,AAAqBO;;AAAjC;;AADF;;;AAKJ,AAAA,AAAAQ,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAwBM;AAAxB,AAAAF,AAAAJ,AAAA,AAA2CO;AAA3C,AAAAH,AAAAJ,AAAA,AAAiDQ;AAAjD,AAAAJ,AAAAJ,AAAA,AAA6DS;AAA7D,AACE,AAAAC,AAAwD,AAACN,AAAId,AAAiBkB;AAA9EE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAAA,AAAiDI;AAAjD,AAAAV,AAAAM,AAAA,AAAcC;AAAd,AAAAP,AAAAM,AAAA,AAAwBE;AAAxB,AAAAR,AAAAM,AAAA,AAAoCG;AAC9BE,AAAS,AAAA,AAAA,AAAuBJ;AAChCK,AAAS,AAAA,AAAA,AAAuBL;AAChCM,AAAM,AAACC,AAAQ,AAAA,AAAOL;AAH5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIYP,AACT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMW,AAC8BL,AAAoBG,AACtBH,AAAoBI,AAC/CR,AACD,AAAA,AAAA,AAAA,AAAA,AAACW,AAAUZ,AAAYK,AAAiBI,AAAiBP;;AAEpE,AAAA,AAAMW;AAAN,AACE,AAAMC,AAAoB,AAAA,AAACpC;AACrBqC,AAAsB,AAAA,AAACrC;AACvBwB,AAAY;AAAA,AACE,AAAA,AAACZ,AAAOwB;;AACR,AAAA,AAACxB,AAAOyB;;AAJ5B,AAKE;AAAA,AACE,AAAME,AAAqB,AAAA,AAAA7B,AAACF,AAAgBT;AAA5C,AAAAW,AACM8B,AAAqBzC;AACrB0C,AAAiB,AAAA,AAAA/B,AAACT,AAAYF;AAFpCuC,AAGsC,AAACnB,AAAId,AAAiBmC;AAH5DF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAAA,AAG+BT;AAH/B,AAAAV,AAAAmB,AAAA,AAGcX;AACRe,AAAS,AAAKC;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAAjC,AAAO2B;AAAP,AACE,AAAM,AAACxB;AAAP,AACE,AAAA,AAACD,AAAOyB;;AADV;;;AADF;;;AAGXO,AAAK,AAAKD;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAAjC,AAAO2B;AAAP,AACE,AAAM,AAAC5B;AAAP,AACE,AAAA,AAACG,AAAOyB;;AADV;;;AADF;;;AAGPQ,AAAM,AAAKF;AAAL,AACE,AAAiBA;;AACjB,AAACG;;AAhBf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAkBQ,AAAA,AAAA,AAAA,AAACZ,AACN,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW2B,AACH,AAACH,AAAU,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW0B,AAErB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACF,AAKLa,AACC,AAACb,AAAU,AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAK0B,AACpBhB,AAAsBmB,AACO,AAACL,AAAUc,AACxBA,AAChB5B,AAA6B,AAAA,AAAA,AAAA,AAACc,AAAUe,AACCzB,AACEoB,AACrBJ,AACAhB,AACN0B,AAChB9B,AAAsBqB,AACO,AAACP,AAAUc,AACxBA,AACT,AAACd,AAAUiB,AACb,AAAA,AAAAzC,AAAA,AAAK2B,AAAsBV,AAEPe,AAElB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACR,AACiBU,AAElB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACV,AACiBW;;;AAGpC,AAAA,AAAMO,AAAqBlD;AAA3B,AACE,AAAC4C;;AACD,AAAAO,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AACGhD,AAAOb,AAAqBG;AAD/B2D,AAAA,AAEGkB,AAAqB5C;AAFxBuB,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAC,AAAAL,AAAAG;;AAAA;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAN;;AAAA,AAAA,AAAAQ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAAC;AAAA,AAAA,AAAA,AAAAU,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAAd,AAAA;AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAA,AAAAC,AAAA,AAAAhB,AAAA;;AAAAe;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAR;;;;AAAAQ;;;;;AAAAR;;;;;AAAAA;;;;;;;;;AAAAiB,AAAA,AAAAC,AAAA,AAAApB;AAAA,AAAA,AAAAoB,AAAAC,AAAA,AAAAxB;;AAAAuB;;AAAA,AAAA,AAAAE,AAAAH;;;AAAAtB;;AAIF,AAAA,AAAA2B,AAAOE,AAA+DhF;AAAtE,AAAA,AAAA+E,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjE,AAAA,AAAAiE,AAAA,AAAA,AAAA,AAAA,AAAAhE,AAAAC,AAAA+D,AAAAA;AAAAA,AAA+DpD;AAA/D,AAAAV,AAAA8D,AAAA,AAA4BvD;AAA5B,AAAAP,AAAA8D,AAAA,AAAsCtD;AAAtC,AAAAR,AAAA8D,AAAA,AAAkDrD;AAAlD,AACE,AAAMG,AAAS,AAAA,AAAA,AAAuBL;AAAtC,AAAA,AAAA,AAAA,AAAA,AAAA,AACaK,AACI,AAAKY;AAAL,AACE,AAAiBA;;AACjB,AAACS,AAAoBlD;AAJxC,AAAA,AAKS,AAAA,AAAA,AAAA,AAAA,AAACgC,AAAUiD,AACM,AAAA,AAAA,AAAuBzD,AACrBC,AACFA;;AAE5B,AAAA,AAAMyD;AAAN,AACE,AAAMC,AAAW,AAAA,AAACrF;AAAlB,AACMsF;AADN,AAEMC;AAFN,AAGE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIIC,AAKA,AAACC,AACC,AAAKvF,AAAMwF;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACSxF,AACOoF,AACZJ,AAAYQ,AAAWxF;AAbjC,AAAA,AAcM,AAACyF,AAAKJ,AAAyBlF,AAE5B,AAAA,AAAA,AAAA,AAAC6B,AAAU,AAAA,AAAAxB,AAAA,AAAA,AAAW2E,AAAWO,AAEtC,AAACH,AACC,AAAKvF,AAAMwF;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACSxF,AACOoF,AACZJ,AAAYQ,AAAW,AAAGxF,AAAMqF;AACpC,AAACM,AAAOxF,AAAiBkF,AAE5B,AAAA,AAAA7E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW2E,AACRS;AADH,AACyB,AAAA,AAAClF,AAAOyE;AA1BpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAyBG","names":["pikseli.views.photography/selected-photo-index","reagent.core.atom","pikseli.views.photography/next-index","index","max-possible-index","cljs.core/count","pikseli.data.photography/photos","next-index","next-index-fixed","pikseli.views.photography/previous-index","pikseli.views.photography/set-next-index!","cljs.core/deref","cljs.core.not_EQ_","cljs.core/reset!","pikseli.views.photography/set-previous-index!","p__27880","map__27881","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","pikseli.views.photography/picture","picture-attributes","style","image-index","show-image!","map__27883","file-name","description","formats","photo","webp-url","jpeg-url","webp?","cljs.core/boolean","stylefy.core.use_style","pikseli.views.photography/photo-in-modal","first-image-loaded?","current-image-loaded?","map__27885","previous-index-value","current-index-value","next-index-value","previous","event","next","close","pikseli.ui.modal/hide!","pikseli.ui.general/loader-dark","pikseli.styles.views.photography/buffer-photo","pikseli.styles.global/clickable","pikseli.styles.views.photography/photo-in-modal","pikseli.styles.views.photography/photo-text","pikseli.views.photography/view-photo-in-modal","c__26428__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26429__auto__","switch__26405__auto__","state_27890","state_val_27891","inst_27887","inst_27888","statearr-27892","cljs.core.async.impl.ioc-helpers/return-chan","statearr-27893","state-machine__26406__auto__","ret-value__26407__auto__","result__26408__auto__","cljs.core/keyword-identical?","ex__26409__auto__","e27894","statearr-27895","cljs.core/seq","statearr-27896","cljs.core/first","state__26430__auto__","statearr-27897","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","pikseli.ui.modal/show-contents!","p__27898","map__27899","pikseli.views.photography/photo-thumb","pikseli.styles.views.photography/photo","pikseli.views.photography/photography","show-more?","row-class","show-n-photos-by-default","pikseli.ui.general/blockquote","cljs.core.map_indexed","photo-data","cljs.core.take","pikseli.styles.global/hidden","cljs.core.subvec","pikseli.ui.general/button"],"sourcesContent":["(ns pikseli.views.photography\r\n  (:require [stylefy.core :refer [use-style sub-style use-sub-style]]\r\n            [reagent.core :as r]\r\n            [pikseli.styles.views.photography :as pstyle]\r\n            [pikseli.styles.global :as s-global]\r\n            [pikseli.data.photography :as photodata]\r\n            [pikseli.ui.general :as ui]\r\n            [pikseli.ui.modal :as modal])\r\n  (:require-macros\r\n    [cljs.core.async.macros :refer [go]]))\r\n\r\n(def selected-photo-index (r/atom nil))\r\n\r\n(defn next-index [index]\r\n  (let [max-possible-index (- (count photodata/photos) 1)\r\n        next-index (inc index)\r\n        next-index-fixed (if (> next-index max-possible-index) max-possible-index next-index)]\r\n    next-index-fixed))\r\n\r\n(defn previous-index [index]\r\n  (let [next-index (dec index)\r\n        next-index-fixed (if (< next-index 0) 0 next-index)]\r\n    next-index-fixed))\r\n\r\n(defn set-next-index! []\r\n  (let [next-index (next-index @selected-photo-index)]\r\n    (if (not= next-index @selected-photo-index)\r\n      (do (reset! selected-photo-index next-index)\r\n          true)\r\n      false)))\r\n\r\n(defn set-previous-index! []\r\n  (let [next-index (previous-index @selected-photo-index)]\r\n    (if (not= next-index @selected-photo-index)\r\n      (do (reset! selected-photo-index next-index)\r\n          true)\r\n      false)))\r\n\r\n(defn- picture [{:keys [picture-attributes style image-index show-image!]}]\r\n  (let [{:keys [file-name description formats] :as photo} (get photodata/photos image-index)\r\n        webp-url (str \"/images/photos/\" file-name \".webp\")\r\n        jpeg-url (str \"/images/photos/\" file-name \".jpg\")\r\n        webp? (boolean (:webp formats))]\r\n    [:picture picture-attributes\r\n     (when webp?\r\n       [:source {:type \"image/webp\" :alt description :srcSet webp-url}])\r\n     [:source {:type \"image/jpeg\" :alt description :srcSet jpeg-url}]\r\n     ^{:key image-index} ; Important: we want to display the buffered image, also helps Firefox to render the image correctly\r\n     [:img (use-style style {:alt description :src jpeg-url :onLoad show-image!})]]))\r\n\r\n(defn photo-in-modal []\r\n  (let [first-image-loaded? (r/atom false)\r\n        current-image-loaded? (r/atom false)\r\n        show-image! (fn []\r\n                      (reset! first-image-loaded? true)\r\n                      (reset! current-image-loaded? true))]\r\n    (fn []\r\n      (let [previous-index-value (previous-index @selected-photo-index)\r\n            current-index-value @selected-photo-index\r\n            next-index-value (next-index @selected-photo-index)\r\n            {:keys [description] :as photo} (get photodata/photos current-index-value)\r\n            previous (fn [event]\r\n                       (.preventDefault event)\r\n                       (when @current-image-loaded?\r\n                         (when (set-previous-index!)\r\n                           (reset! current-image-loaded? false))))\r\n            next (fn [event]\r\n                   (.preventDefault event)\r\n                   (when @current-image-loaded?\r\n                     (when (set-next-index!)\r\n                       (reset! current-image-loaded? false))))\r\n            close (fn [event]\r\n                    (.preventDefault event)\r\n                    (modal/hide!))]\r\n\r\n        [:div (use-style {:position :relative})\r\n         (when-not @current-image-loaded?\r\n           [:div (use-style (when-not @first-image-loaded?\r\n                              {:margin-top \"4rem\"}))\r\n            [:div (use-style {:position :absolute\r\n                              :z-index 1000\r\n                              :top \"50%\"\r\n                              :left \"50%\"\r\n                              :transform \"translateX(-50%) translateY(-80%)\"})\r\n             [ui/loader-dark]]])\r\n         [:div (use-style (if @first-image-loaded? {:display :block} {:display :none}))\r\n          [picture {:image-index previous-index-value\r\n                    :picture-attributes (use-style pstyle/buffer-photo)\r\n                    :style pstyle/buffer-photo}]\r\n          [picture {:picture-attributes (use-style s-global/clickable\r\n                                           {:onLoad show-image!\r\n                                            :on-click next})\r\n                    :image-index current-index-value\r\n                    :show-image! show-image!\r\n                    :style pstyle/photo-in-modal}]\r\n          [picture {:image-index next-index-value\r\n                    :picture-attributes (use-style pstyle/buffer-photo)\r\n                    :style pstyle/buffer-photo}]]\r\n         [:footer (use-style pstyle/photo-text)\r\n          [:div (if @current-image-loaded? description \"Loading...\")]\r\n          [:div\r\n           [:a {:href \"#\" :on-click previous}\r\n            \"<\"]\r\n           [:span (use-style {:margin-left \"1rem\" :margin-right \"1rem\"}) \" \"]\r\n           [:a {:href \"#\" :on-click next}\r\n            \">\"]\r\n           [:span (use-style {:margin-left \"1rem\" :margin-right \"1rem\"}) \" \"]\r\n           [:a {:href \"#\" :on-click close}\r\n            \"Close\"]]]]))))\r\n\r\n(defn view-photo-in-modal [index]\r\n  (modal/hide!)\r\n  (go\r\n    (reset! selected-photo-index index)\r\n    (modal/show-contents! photo-in-modal)))\r\n\r\n(defn- photo-thumb [{:keys [file-name description formats] :as photo} index]\r\n  (let [jpeg-url (str \"/images/photos/\" file-name \".jpg\")]\r\n    [:a {:href jpeg-url ; For SEO\r\n         :on-click (fn [event]\r\n                     (.preventDefault event)\r\n                     (view-photo-in-modal index))}\r\n     [:img (use-style pstyle/photo\r\n                      {:src (str \"/images/photos/\" file-name \"_thumb.jpg\")\r\n                       :title description\r\n                       :alt description})]]))\r\n\r\n(defn photography []\r\n  (let [show-more? (r/atom false)\r\n        row-class \"col-12 col-md-6 col-lg-4\"\r\n        show-n-photos-by-default 9]\r\n    (fn []\r\n      [:section\r\n       [:a {:id \"photography\"}]\r\n       [:h1 \"Photography\"]\r\n       [ui/blockquote\r\n        \"A photograph has picked up a fact of life, and that fact will live forever.\"\r\n        \"Raghu Rain\"]\r\n\r\n       [:div {:class \"row\"}\r\n        (map-indexed\r\n          (fn [index photo-data]\r\n            ^{:key index}\r\n            [:div {:class row-class}\r\n             [photo-thumb photo-data index]])\r\n          (take show-n-photos-by-default photodata/photos))]\r\n\r\n       [:div (use-style (when-not @show-more? s-global/hidden)\r\n                        {:class \"row\"})\r\n        (map-indexed\r\n          (fn [index photo-data]\r\n            ^{:key index}\r\n            [:div {:class row-class}\r\n             [photo-thumb photo-data (+ index show-n-photos-by-default)]])\r\n          (subvec photodata/photos show-n-photos-by-default))]\r\n\r\n       (when-not @show-more?\r\n         [ui/button {:on-click #(reset! show-more? true)} \"Show more photos\"])\r\n\r\n       [:br]\r\n       [:p \"I mostly photograph the natural beauty of Finland. Please notice that all my photos are copyrighted and you are not allowed to use them without permission.\"]\r\n       [:p \"Follow me on \"\r\n        [:a {:href \"https://www.instagram.com/jari_hanhela\"}\r\n         \"Instagram\"]\r\n        \" if you want to see my new photos first.\"]])))\r\n"]}