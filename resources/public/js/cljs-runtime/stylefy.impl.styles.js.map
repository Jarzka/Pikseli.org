{"version":3,"sources":["stylefy/impl/styles.cljs"],"mappings":"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","names":["stylefy.impl.styles/global-vendor-prefixes","cljs.core.atom","stylefy.impl.styles/add-global-vendors","style","cljs.core.merge","clojure.set.union","cljs.core/deref","p__38268","map__38269","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","stylefy.impl.styles/create-style!","props","hash","stylefy.impl.dom/save-style!","seq__38271","cljs.core/seq","chunk__38272","count__38273","i__38274","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub-style","cljs.core/vals","G__38277","G__38278","stylefy.impl.hashing/hash-style","stylefy.impl.styles/prepare-style-return-value","style-hash","options","with-classes","cljs.core.concat","html-attributes","stylefy.impl.utils/filter-css-props","html-attributes-class","html-attributes-inline-style","final-class","clojure.string/trim","clojure.string.join","cljs.core/vector?","final-html-attributes","cljs.core/empty?","js/Error","cljs.core.pr_str","stylefy.impl.styles/style-return-value","return-map","stylefy.impl.dom/style-in-dom?","contains-media-queries?","contains-feature-queries?","contains-manual-mode?","excluded-modes","modes","mode-names","cljs.core/map?","cljs.core/set","cljs.core/keys","cljs.core.map","contains-modes-not-excluded?","cljs.core.filter","cljs.core.comp","cljs.core/not","inline-style","stylefy.impl.conversion/garden-units->css","stylefy.impl.styles/use-style!","with-classes-options","with-classes-style","cljs.core/every?","cljs.core/string?","stylefy.impl.dom/check-stylefy-initialisation","style-with-global-vendors","already-created","stylefy.impl.dom/style-by-hash","stylefy.impl.styles/use-sub-style!","resolved-sub-style","js/console","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","stylefy.impl.styles/sub-style","seq38292","G__38293","self__4717__auto__","sub-styles","p1__38290#","p2__38291#","cljs.core.reduce","cljs.core.get_in","G__38295","stylefy.impl.styles/prepare-styles","p__38296","map__38297","styles","stylefy.impl.styles.prepare_styles","request-dom-update-after-done?","cljs.core.remove","cljs.core/nil?","seq__38299","chunk__38300","count__38301","i__38302","stylefy.impl.dom/update-dom-if-requested","stylefy.impl.styles/init-global-vendor-prefixes","global-vendor-prefixes-options","cljs.core/reset!"],"sourcesContent":["(ns stylefy.impl.styles\n  (:require [stylefy.impl.dom :as dom]\n            [garden.core :refer [css]]\n            [clojure.string :as str]\n            [stylefy.impl.hashing :as hashing]\n            [stylefy.impl.utils :as utils]\n            [stylefy.impl.conversion :as conversion]\n            [clojure.set :as set]))\n\n(def global-vendor-prefixes (atom {:stylefy.core/vendors #{}\n                                   :stylefy.core/auto-prefix #{}}))\n\n(defn- add-global-vendors [style]\n  (merge style\n         {:stylefy.core/vendors (set/union (:stylefy.core/vendors @global-vendor-prefixes)\n                                           (:stylefy.core/vendors style))\n          :stylefy.core/auto-prefix (set/union (:stylefy.core/auto-prefix @global-vendor-prefixes)\n                                               (:stylefy.core/auto-prefix style))}))\n\n(defn- create-style! [{:keys [props hash] :as style}]\n  (dom/save-style! {:props props :hash hash})\n\n  ;; Create sub-styles (if any)\n  (doseq [sub-style (vals (:stylefy.core/sub-styles props))]\n    (create-style! {:props sub-style :hash (hashing/hash-style sub-style)})))\n\n(defn- prepare-style-return-value\n  \"Given a style, hash and options, returns HTML attributes for a Hiccup component,\n   or nil if there are not any attributes.\"\n  [style style-hash options]\n  (let [with-classes (concat (:stylefy.core/with-classes style)\n                             (:stylefy.core/with-classes options))\n        html-attributes (utils/filter-css-props options)\n        html-attributes-class (:class html-attributes)\n        html-attributes-inline-style (:style html-attributes)\n        final-class (str/trim\n                      (cond\n                        (nil? html-attributes-class)\n                        (str/join \" \" (concat with-classes [style-hash]))\n\n                        (string? html-attributes-class)\n                        (str/join \" \" (concat [html-attributes-class] with-classes [style-hash]))\n\n                        (vector? html-attributes-class)\n                        (str/join \" \" (concat html-attributes-class with-classes [style-hash]))))\n        final-html-attributes (merge\n                                html-attributes\n                                (when (not (empty? final-class)) {:class final-class}))]\n\n    (assert (or (nil? html-attributes-class)\n                (string? html-attributes-class)\n                (vector? html-attributes-class))\n            (str \"Unsupported :class type (should be nil, string or vector). Got: \" (pr-str html-attributes-class)))\n    (assert (nil? html-attributes-inline-style)\n            \"HTML attribute :style is not supported in options map. Instead, you should provide your style definitions as the first argument when calling use-style.\")\n\n    (when (not (empty? final-html-attributes))\n      final-html-attributes)))\n\n(defn- style-return-value [style style-hash options]\n  (let [return-map (prepare-style-return-value style style-hash options)]\n    (if (or (empty? style)\n            (dom/style-in-dom? style-hash))\n      return-map\n      ;; The style definition has not been added into the DOM yet, so return the style props\n      ;; as inline style. Inline style gets replaced soon as the style definition\n      ;; is added into the DOM and the component re-renders itself.\n      ;; However, if there are media queries, specific mode definitions etc., inline styling is probably\n      ;; going to look wrong. In that case, hide the component completely until the DOM is ready.\n      (let [contains-media-queries? (some? (:stylefy.core/media style))\n            contains-feature-queries? (some? (:stylefy.core/supports style))\n            contains-manual-mode? (some? (:stylefy.core/manual style))\n            excluded-modes #{:hover}\n            modes (:stylefy.core/mode style)\n            mode-names (cond\n                         (map? modes) (set (keys modes))\n                         (vector? modes) (set (map first modes))\n                         :default #{})\n            contains-modes-not-excluded? (not (empty?\n                                                (filter (comp not excluded-modes)\n                                                        mode-names)))\n            inline-style (-> style\n                             (utils/filter-css-props)\n                             (conversion/garden-units->css))]\n        (if (or contains-media-queries?\n                contains-feature-queries?\n                contains-manual-mode?\n                contains-modes-not-excluded?)\n          (merge return-map {:style (merge inline-style\n                                           {:visibility \"hidden\"})})\n          (merge return-map {:style inline-style}))))))\n\n(defn use-style! [style options]\n  (let [with-classes-options (:stylefy.core/with-classes options)\n        with-classes-style (:stylefy.core/with-classes style)]\n\n    (assert (or (nil? with-classes-options)\n                (and (vector? with-classes-options)\n                     (every? string? with-classes-options)))\n            (str \"with-classes argument inside options map must be a vector of strings, got: \" (pr-str with-classes-options)))\n\n    (assert (or (nil? with-classes-style)\n                (and (vector? with-classes-style)\n                     (every? string? with-classes-style)))\n            (str \"with-classes argument inside style map must be a vector of strings, got: \" (pr-str with-classes-style)))\n\n    (dom/check-stylefy-initialisation)\n\n    (let [style-with-global-vendors (when-not (empty? style) (add-global-vendors style))\n          style-hash (hashing/hash-style style-with-global-vendors)\n          already-created (dom/style-by-hash style-hash)]\n\n      (when (and (not (empty? style-with-global-vendors))\n                 (some? style-hash)\n                 (not already-created))\n        (create-style! {:props style-with-global-vendors :hash style-hash}))\n\n      (style-return-value style-with-global-vendors style-hash options))))\n\n(defn use-sub-style! [style sub-style options]\n  (let [resolved-sub-style (get (:stylefy.core/sub-styles style) sub-style)]\n    (if resolved-sub-style\n      (use-style! resolved-sub-style options)\n      (.warn js/console (str \"Sub-style \" (pr-str sub-style) \" not found in style: \" (pr-str style))))))\n\n(defn sub-style\n  [style & sub-styles]\n  (let [resolved-sub-style (reduce #(get-in %1 [:stylefy.core/sub-styles %2])\n                                   style\n                                   sub-styles)]\n\n    (if resolved-sub-style\n      resolved-sub-style\n      (.warn js/console (str \"Sub-style \" (pr-str sub-styles) \" not found in style: \" (pr-str style))))))\n\n(defn prepare-styles\n  ([styles]\n   (prepare-styles styles {:request-dom-update-after-done? true}))\n  ([styles {:keys [request-dom-update-after-done?] :as options}]\n   (let [styles (remove nil? styles)]\n\n     (doseq [style styles]\n       (use-style! style {})\n       (when-let [sub-styles (vals (:stylefy.core/sub-styles style))]\n         (prepare-styles sub-styles {:request-dom-update-after-done? false}))))\n\n   (when request-dom-update-after-done?\n     (dom/update-dom-if-requested))))\n\n(defn init-global-vendor-prefixes [options]\n  (let [global-vendor-prefixes-options (:global-vendor-prefixes options)]\n    (reset! global-vendor-prefixes\n            {:stylefy.core/vendors (:stylefy.core/vendors global-vendor-prefixes-options)\n             :stylefy.core/auto-prefix (:stylefy.core/auto-prefix global-vendor-prefixes-options)})))\n"]}