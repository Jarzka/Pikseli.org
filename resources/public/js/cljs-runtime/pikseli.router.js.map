{"version":3,"sources":["pikseli/router.cljc"],"mappings":";;;AAGA,AAAA,AAAA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AAAWC;AAAjB,AACE,AAACC,AAAI,AAACC,AAAK,AAAA,AAACC,AAAaH;;AAE3B,AAAA,AAAMI,AAAqBJ;AAA3B,AACE,AAAMK,AAAe,AAACC,AAAM,AAACP,AAAUC;AAAvC,AACE,AAACO,AAAQ,AAAA,AAACC,AAAEH;;AAEhB,AAAA,AAAMI,AAA2BC;AAAjC,AACE,AAAMC,AAAc,AAAA,AAACR,AAAaO;AAC5BE,AAAU,AAAM,AAAAC,AAAQ,AAACC,AAAOH;AAAhB,AAAA,AAAAE,AAAAA,AAACf,AAAAA,AAAAA;AAAP,AAAA,AACE,AAACQ,AAAMK;AAFzB,AAAA,AAAA,AAAA,AAAA,AAGMI;AAHN,AAIE,AAACR,AAAQ,AAAA,AAAA,AAAMK,AACJ,AAACG,AAAAA,AAAAA,AAAgBH,AAAAA;;AAEhC,AAAA,AAAMI,AAAcN,AAAKV;AAAzB,AACE,AAAI,AAACS,AAA0BC,AAC3B,AAACN,AAAoBJ;;AAE3B;;;AAAA,AAAMiB,AAEHjB;AAFH,AAGE,AAAM,AAACI,AAAoBJ;AAA3B,AACE,AAACc,AAAO,AAACf,AAAUC;;AADrB","names":["pikseli.router/domain","pikseli.router/uri-parts","uri","cljs.core/vec","cljs.core/rest","clojure.string.split","pikseli.router/uri-points-to-blog?","uri-first-part","cljs.core/first","cljs.core/boolean","cljs.core._EQ_","pikseli.router/subdomain-points-to-blog?","host","host-splitted","subdomain","G__28038","cljs.core/second","blog-subdomains","pikseli.router/uri-is-blog?","pikseli.router/blog-post-id"],"sourcesContent":["(ns pikseli.router\r\n  (:require [clojure.string :as string]))\r\n\r\n(def domain #{\"pikseli\" \"pikselidev\"})\r\n\r\n(defn uri-parts [uri]\r\n  (vec (rest (string/split uri #\"/\"))))\r\n\r\n(defn uri-points-to-blog? [uri]\r\n  (let [uri-first-part (first (uri-parts uri))]\r\n    (boolean (= uri-first-part \"blog\"))))\r\n\r\n(defn subdomain-points-to-blog? [host]\r\n  (let [host-splitted (string/split host #\"\\.\")\r\n        subdomain (when (domain (second host-splitted)) ; Sub-domain used\r\n                    (first host-splitted))\r\n        blog-subdomains #{\"blog\" \"metsassa\" \"mets\u00e4ss\u00e4\" \"xn--metsss-euac\"}]\r\n    (boolean (when subdomain\r\n               (blog-subdomains subdomain)))))\r\n\r\n(defn uri-is-blog? [host uri]\r\n  (or (subdomain-points-to-blog? host)\r\n      (uri-points-to-blog? uri)))\r\n\r\n(defn blog-post-id\r\n  \"Parses blog post id from URL, or returns nil if post id was not found\"\r\n  [uri]\r\n  (when (uri-points-to-blog? uri)\r\n    (second (uri-parts uri))))"]}