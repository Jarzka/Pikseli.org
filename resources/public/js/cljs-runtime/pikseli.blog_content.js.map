{"version":3,"sources":["pikseli/blog_content.cljs"],"mappings":"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","names":["pikseli.blog-content/blog-date-out-formatter","cljs_time.format.formatter","pikseli.blog-content/blog-loader","pikseli.ui.general/loader-light","pikseli.blog-content/single-full-blog-post","post-id","post-html","reagent.core.atom","set-contents!","post","metadata","pikseli.router/blog-post-id","pikseli.services.router/read-uri","pikseli.services.dom/set-title","pikseli.page-settings/blog-post-title","pikseli.services.dom/set-meta-tags","pikseli.services.router/read-host","cljs.core/reset!","reagent.core/create-class","cljs.core/deref","cljs.core.get","pikseli.services.blog/loaded-posts","pikseli.api.post-api/get-post","file-name","contents","cljs.core.swap_BANG_","cljs.core/assoc","pikseli.services.dom/clear-meta-tags","pikseli.components.app-link/app-link","stylefy.core.use_style","pikseli.styles.global/link","pikseli.styles.views.blog/author-and-date","cljs-time.format/unparse","cljs-time.coerce/from-date","pikseli.styles.views.blog/blog-post","pikseli.blog-content/post-list","posts","post-ids","cljs.core/keys","cljs.core.sort","cljs.core/reverse","cljs.core/vec","cljs.core.map_indexed","index","pikseli.blog-content/blog-home","post-file-names","error?","handle-error","error","js/console","pikseli.page-settings/page-title","pikseli.api.post-api/get-post-ids","ids","pikseli.api.post-api/get-posts","all-files-loaded?","cljs.core._EQ_","cljs.core/count","pikseli.blog-content/content","blog-post-id","pikseli.services.router/uri","pikseli.styles.views.blog/blog-content","pikseli.styles.views.blog/header","pikseli.styles.views.blog/back","stylefy.core.use_sub_style","pikseli.styles.layout/site-header","pikseli.page-settings/blog-logo-url"],"sourcesContent":["(ns pikseli.blog-content\r\n  (:require-macros [cljs.core.async.macros :refer [go]])\r\n  (:require [stylefy.core :refer [use-style sub-style use-sub-style]]\r\n            [pikseli.components.app-link :refer [app-link]]\r\n            [pikseli.api.post-api :as post-api]\r\n            [pikseli.services.blog :as blog-service]\r\n            [pikseli.services.dom :as dom-service]\r\n            [pikseli.styles.views.blog :as blog-style]\r\n            [pikseli.page-settings :as page-settings]\r\n            [reagent.core :as r]\r\n            [cljs.core.async :refer [<!]]\r\n            [cljs-time.format :as format]\r\n            [cljs-time.coerce :as tc]\r\n            [pikseli.styles.layout :as layout]\r\n            [pikseli.router :as router]\r\n            [pikseli.services.router :as router-service]\r\n            [pikseli.styles.global :as g-styles]\r\n            [pikseli.ui.general :as ui]))\r\n\r\n(def blog-date-out-formatter (format/formatter \"d.M.yyyy\"))\r\n\r\n(defn blog-loader []\r\n  [ui/loader-light {:text \"Odota hetki...\"}])\r\n\r\n(defn single-full-blog-post [post-id]\r\n  (let [post-html (r/atom nil)\r\n        set-contents! (fn [post]\r\n                        (let [metadata (:metadata post)]\r\n                          ; Update title & page metadata\r\n                          (when (router/blog-post-id (router-service/read-uri))\r\n                            (dom-service/set-title\r\n                              (page-settings/blog-post-title\r\n                                (:title metadata)))\r\n                            (dom-service/set-meta-tags\r\n                              {:title (:title metadata)\r\n                               :type \"article\"\r\n                               :image (:image metadata)\r\n                               :uri (str (router-service/read-host)\r\n                                         (router-service/read-uri))\r\n                               :author (:author metadata)\r\n                               :keywords (:keywords metadata)}))\r\n\r\n                          (reset! post-html (:html post))))]\r\n    (r/create-class\r\n      {:component-did-mount\r\n       (fn []\r\n         (let [post (get @blog-service/loaded-posts post-id)]\r\n           (if post\r\n             (set-contents! post)\r\n             (post-api/get-post post-id\r\n                                    (fn [file-name contents]\r\n                                      (swap! blog-service/loaded-posts assoc file-name contents)\r\n                                      (set-contents! contents))\r\n                                    nil ; TODO handle error\r\n                                    ))))\r\n       :component-will-unmount\r\n       (fn []\r\n         ; Update title and metadata\r\n         (when-not (router/blog-post-id (router-service/read-uri))\r\n           (dom-service/clear-meta-tags)))\r\n       :render\r\n       (fn []\r\n         (let [post (get @blog-service/loaded-posts post-id)\r\n               metadata (:metadata post)]\r\n           [:article\r\n            (when post\r\n              (if (router/blog-post-id (router-service/read-uri))\r\n                [:h1 (:title metadata)]\r\n                [app-link {:uri (str \"/blog/\" post-id)}\r\n                 [:h1 (use-style g-styles/link)\r\n                  (:title metadata)]]))\r\n\r\n            (when post [:span (use-style blog-style/author-and-date)\r\n                        (str\r\n                          (when (:author metadata)\r\n                            (:author metadata))\r\n                         \" - \"\r\n                         (when (:date metadata)\r\n                           (format/unparse blog-date-out-formatter (tc/from-date (:date metadata)))))])\r\n\r\n            (when-not post [blog-loader])\r\n\r\n            ; Template needs to be rendered so that it is ready when to contents is set!\r\n            [:div (use-style\r\n                    blog-style/blog-post\r\n                    {:dangerouslySetInnerHTML {:__html @post-html}})]]))})))\r\n\r\n(defn post-list [posts]\r\n  (let [post-ids (-> posts keys sort reverse vec)]\r\n    [:div\r\n     (map-indexed\r\n       (fn [index post-id]\r\n         ^{:key index}\r\n         [single-full-blog-post post-id])\r\n       post-ids)]))\r\n\r\n(defn blog-home []\r\n  (let [post-file-names (r/atom nil)\r\n        error? false\r\n        handle-error (fn [error]\r\n                       (.error js/console \"Error: \" error)\r\n                       (reset! error? true))]\r\n\r\n    (r/create-class\r\n      {:component-did-mount\r\n       (fn []\r\n         (dom-service/set-title (page-settings/page-title \"/blog\"))\r\n         (post-api/get-post-ids\r\n           (fn [ids]\r\n             (reset! post-file-names ids)\r\n             (post-api/get-posts ids\r\n                                 (fn [file-name contents]\r\n                                   (swap! blog-service/loaded-posts assoc file-name contents))\r\n                                 handle-error))\r\n           handle-error))\r\n       :render\r\n       (fn []\r\n         (let [all-files-loaded? (= (count (keys @blog-service/loaded-posts)) (count @post-file-names))]\r\n           [:div\r\n            (cond\r\n              error? \"Virhe\"\r\n              all-files-loaded? [post-list @blog-service/loaded-posts]\r\n              :default [blog-loader])]))})))\r\n\r\n(defn content []\r\n  (let [blog-post-id (router/blog-post-id @router-service/uri)]\r\n    [:div (use-style blog-style/blog-content)\r\n     [:header (use-style blog-style/header)\r\n      (if blog-post-id\r\n        [app-link {:style blog-style/back\r\n                   :uri \"/blog\"}\r\n         \"< Etusivu\"]\r\n        [:a (use-style blog-style/back {:href \"https://pikseli.org\"})\r\n         \"< Pikseli.org\"])\r\n      [:div (use-sub-style layout/site-header :logo-and-description)\r\n       [:div [app-link {:uri \"/blog\"}\r\n        [:img (use-sub-style layout/site-header :logo-blog\r\n                             {:alt \"Kotona ikimets\u00e4ss\u00e4\" :src page-settings/blog-logo-url})]]]]]\r\n     (if blog-post-id\r\n       [single-full-blog-post blog-post-id]\r\n       [blog-home])]))"]}