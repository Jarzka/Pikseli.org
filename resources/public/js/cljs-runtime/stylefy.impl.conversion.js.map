{"version":3,"sources":["stylefy/impl/conversion.cljs"],"mappings":"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","names":["stylefy.impl.conversion/garden-units->css","props","cljs.core.reduce","result","next-key","value","stylefy.impl.utils/is-garden-value?","cljs.core.assoc","garden.compiler/render-css","cljs.core/keys","stylefy.impl.conversion/convert-stylefy-vendors-to-garden","temp__5735__auto__","vendors","stylefy.impl.conversion/convert-stylefy-modes-to-garden","modes","handle-mode","mode-name","mode-props","js/Error","cljs.core/Keyword","clojure.string/starts-with?","cljs.core.pr_str","cljs.core/count","clojure.string.split","js/console","cljs.core.keyword","or__4120__auto__","cljs.core.get","cljs.core/map?","cljs.core.mapv","cljs.core/vector?","p1__38133#","cljs.core/first","cljs.core/second","stylefy.impl.conversion/class-selector","hash","p__38136","map__38137","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","stylefy.impl.conversion/convert-base-style-into-class","custom-selector","style","options","css-props","stylefy.impl.utils/filter-css-props","css-selector","garden-class-definition","garden-pseudo-classes","garden-vendors","garden-options","cljs.core.merge","css-class","garden.core.css","cljs.core.into","p__38159","map__38160","stylefy.impl.conversion/convert-media-queries","stylefy-media-queries","css-media-queries","cljs.core.map","media-query","media-query-props","media-query-css-props","garden.stylesheet.at_media","cljs.core/str","p__38162","map__38163","stylefy.impl.conversion/convert-supports-rules","stylefy-supports","css-supports","supports-selector","supports-props","supports-css-props","css-media-queries-inside-supports","p__38166","map__38167","stylefy.impl.conversion/convert-manual-styles","stylefy-manual-styles","css-parent-selector","css-manual-styles","manual-style","manual-selector-and-css-props","p1__38165#","clojure.walk/walk","cljs.core/identity","garden-style-definition","var_args","G__38170","stylefy.impl.conversion/style->css","p__38171","map__38172","stylefy.impl.conversion.style__GT_css"],"sourcesContent":["(ns stylefy.impl.conversion\n  (:require [garden.core :refer [css]]\n            [stylefy.impl.utils :as utils]\n            [garden.stylesheet :refer [at-media at-keyframes at-font-face]]\n            [clojure.string :as str]\n            [garden.compiler :as compiler]))\n\n(defn garden-units->css\n  \"Checks all values in the map and converts all Garden units to CSS.\"\n  [props]\n  (reduce\n    (fn [result next-key]\n      (let [value (next-key props)]\n        (if (utils/is-garden-value? value)\n          (assoc result next-key (compiler/render-css value))\n          result)))\n    props\n    (keys props)))\n\n(defn- convert-stylefy-vendors-to-garden [props]\n  (when-let [vendors (:stylefy.core/vendors props)]\n    {:vendors vendors\n     :auto-prefix (:stylefy.core/auto-prefix props)}))\n\n(defn- convert-stylefy-modes-to-garden [props]\n  (let [modes (:stylefy.core/mode props)\n        handle-mode (fn [mode-name mode-props]\n                      (assert (or (keyword? mode-name)\n                                  (and (string? mode-name)\n                                       (str/starts-with? mode-name \":\")))\n                              (str \"Mode must be specified as a keyword or string beginning with colon, got: \" (pr-str mode-name)))\n                      (when (and (string? mode-name)\n                                 (> (count (str/split mode-name \" \")) 1))\n                        (.warn js/console (str \"Incorrect mode detected, should not contain spaces. Mode was: \" (pr-str mode-name))))\n                      [(keyword (str \"&\" mode-name)) (or mode-props (get modes mode-name))])]\n    (cond\n      (map? modes) (mapv handle-mode (keys modes))\n      (vector? modes) (mapv #(handle-mode (first %) (second %)) modes))))\n\n(defn class-selector [hash]\n  (keyword (str \".\" hash)))\n\n(defn- convert-base-style-into-class\n  \"Converts Clojure style map into CSS class.\"\n  [{:keys [props hash custom-selector] :as style} options]\n  (let [css-props (utils/filter-css-props props)\n        css-selector (or custom-selector (class-selector hash))\n        garden-class-definition [css-selector css-props]\n        garden-pseudo-classes (convert-stylefy-modes-to-garden props)\n        garden-vendors (convert-stylefy-vendors-to-garden props)\n        garden-options (or (merge options garden-vendors) {})\n        css-class (css garden-options (into garden-class-definition\n                                            garden-pseudo-classes))]\n    css-class))\n\n(defn- convert-media-queries\n  \"Converts stylefy/media definition into CSS media query.\"\n  [{:keys [props hash custom-selector] :as style} options]\n  (when-let [stylefy-media-queries (:stylefy.core/media props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          css-media-queries\n          (map\n            (fn [media-query]\n              (let [media-query-props (get stylefy-media-queries media-query)\n                    media-query-css-props (utils/filter-css-props media-query-props)\n                    garden-class-definition [css-selector media-query-css-props]\n                    garden-pseudo-classes (convert-stylefy-modes-to-garden media-query-props)\n                    garden-vendors (convert-stylefy-vendors-to-garden media-query-props)\n                    garden-options (or (merge options garden-vendors) {})]\n                (css garden-options (at-media media-query (into garden-class-definition\n                                                                garden-pseudo-classes)))))\n            (keys stylefy-media-queries))]\n      (apply str css-media-queries))))\n\n(defn- convert-supports-rules\n  \"Converts stylefy/supports definition into CSS feature query.\"\n  [{:keys [props hash custom-selector] :as style} options]\n  (when-let [stylefy-supports (:stylefy.core/supports props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          css-supports (map\n                         (fn [supports-selector]\n                           (let [supports-props (get stylefy-supports supports-selector)\n                                 supports-css-props (utils/filter-css-props supports-props)\n                                 garden-class-definition [css-selector supports-css-props]\n                                 garden-pseudo-classes (convert-stylefy-modes-to-garden supports-props)\n                                 garden-vendors (convert-stylefy-vendors-to-garden supports-props)\n                                 garden-options (or (merge options garden-vendors) {})\n                                 css-media-queries-inside-supports\n                                 (convert-media-queries\n                                   {:props supports-props\n                                    :hash hash\n                                    :custom-selector custom-selector}\n                                   options)]\n                             (str \"@supports (\" supports-selector \") {\"\n                                  (css garden-options (into garden-class-definition\n                                                            garden-pseudo-classes))\n                                  css-media-queries-inside-supports\n                                  \"}\")))\n                         (keys stylefy-supports))]\n      (apply str css-supports))))\n\n(defn- convert-manual-styles\n  \"Converts stylefy/manual definition into CSS.\"\n  [{:keys [props hash custom-selector] :as style} options]\n  (when-let [stylefy-manual-styles (:stylefy.core/manual props)]\n    (let [css-parent-selector (or custom-selector (class-selector hash))\n          css-manual-styles (map\n                             (fn [manual-style]\n                               (let [manual-selector-and-css-props (clojure.walk/walk #(if (map? %)\n                                                                                        (utils/filter-css-props %)\n                                                                                        %)\n                                                                                     identity\n                                                                                     manual-style)\n                                     garden-style-definition (into [css-parent-selector] [manual-selector-and-css-props])\n                                     css-class (css options garden-style-definition)]\n                                 css-class))\n                             stylefy-manual-styles)]\n      (apply str css-manual-styles))))\n\n(defn style->css\n  \"Converts the given style to CSS. Options are sent directly to Garden\"\n  ([style] (style->css style {}))\n  ([{:keys [props hash] :as style} options]\n   (let [css-class (convert-base-style-into-class style options)\n         css-media-queries (convert-media-queries style options)\n         css-supports (convert-supports-rules style options)\n         css-manual-styles (convert-manual-styles style options)]\n     (str css-class\n          css-media-queries\n          css-supports\n          css-manual-styles))))"]}