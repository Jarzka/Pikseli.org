{"version":3,"sources":["pikseli/services/dom.cljs"],"mappings":";;AAEA,AAAA,AAAOA,AAAcC,AAASC;AAA9B,AACE,AAAMC,AAAK,AAAA,AAAgBC;AAA3B,AACE,AAAM,AAAQD,AAAMF;;AACpB,AAAM,AAAWE,AAAMD;;AACvB,AAAc,AAAA,AAAM,AAAA,AAAuBE,AAAuBD;;AAEtE,AAAA,AAAOE,AAAiBJ,AAASC;AAAjC,AACE,AAAMC,AAAK,AAAA,AAAgBC;AAA3B,AACE,AAAA,AAAeD,AAAgBF;;AAC/B,AAAM,AAAWE,AAAMD;;AACvB,AAAc,AAAA,AAAM,AAAA,AAAuBE,AAAuBD;;AAEtE,AAAA,AAAMG;AAAN,AACE,AAAMC,AACA,AAAA,AACEH;AAFR,AAUE,AAAAI,AAAA,AAAAC,AAAgBF;AAAhBG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AAASA;;AADX;AAAA,AAAAb;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQa;AAAR,AAAA,AACE,AAASA;;AADX;AAAA,AAAA,AAAAD,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAIJ,AAAA,AAAAc,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA6BM;AAA7B,AAAAF,AAAAJ,AAAA,AAAmCO;AAAnC,AAAAH,AAAAJ,AAAA,AAAwCQ;AAAxC,AAAAJ,AAAAJ,AAAA,AAA+CS;AAA/C,AAAAL,AAAAJ,AAAA,AAAmDU;AAAnD,AAAAN,AAAAJ,AAAA,AAAyDW;AAAzD,AAAAP,AAAAJ,AAAA,AAAqEY;AAArE,AACE,AAAC7B;;AACD,AAAMyB;AAAN,AAAa,AAAA,AAAC/B,AAAsB+B;;AAApC;;AACA,AAAMK;AAAN,AAAc,AAAA,AAACpC,AAAwBmC;;AAAvC;;AACA,AAAMH;AAAN,AAAU,AAAA,AAAC3B,AAAyB2B;;AAApC;;AACA,AAAMF;AAAN,AAAW,AAAA,AAACzB,AAA0ByB;;AAAtC;;AACA,AAAMD;AAAN,AAAY,AAAA,AAACxB,AAA2BwB;;AAAxC;;AACA,AAAMK;AAAN,AAAkB,AAAA,AAAC7B,AAAiC6B;;AAApD;;AACA,AAAMD;AAAN,AAAY,AAAA,AAAC5B,AAA2B4B;;AAAxC;;;AAEF,AAAA,AAAMI,AAAWC;AAAjB,AACE,AAAM,AAASlC,AAAakC","names":["pikseli.services.dom/add-meta-tag","tag-name","contents","meta","js/document","pikseli.services.dom/add-meta-og-tag","pikseli.services.dom/clear-meta-tags","meta-tags","seq__27850","cljs.core/seq","chunk__27851","count__27852","i__27853","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","element","p__27855","map__27856","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","pikseli.services.dom/set-meta-tags","title","type","author","uri","image","description","keywords","cljs.core/keyword","pikseli.services.dom/set-title","text"],"sourcesContent":["(ns pikseli.services.dom)\r\n\r\n(defn- add-meta-tag [tag-name contents]\r\n  (let [meta (.createElement js/document \"meta\")]\r\n    (set! (.-name meta) tag-name)\r\n    (set! (.-content meta) contents)\r\n    (.appendChild (aget (.getElementsByTagName js/document \"head\") 0) meta)))\r\n\r\n(defn- add-meta-og-tag [tag-name contents]\r\n  (let [meta (.createElement js/document \"meta\")]\r\n    (.setAttribute meta \"property\" tag-name) ; set! does not work here\r\n    (set! (.-content meta) contents)\r\n    (.appendChild (aget (.getElementsByTagName js/document \"head\") 0) meta)))\r\n\r\n(defn clear-meta-tags []\r\n  (let [meta-tags\r\n        (.querySelectorAll\r\n          js/document\r\n          \"meta[name='author'],\r\n           meta[name='keywords'],\r\n           meta[property='og:url'],\r\n           meta[property='og:type'],\r\n           meta[property='og:title'],\r\n           meta[property='og:description'],\r\n           meta[property='og:image']\")]\r\n    (doseq [element meta-tags]\r\n      (.remove element))))\r\n\r\n\r\n(defn set-meta-tags [{:keys [title type author uri image description keywords]}]\r\n  (clear-meta-tags)\r\n  (when author (add-meta-tag \"author\" author))\r\n  (when keyword (add-meta-tag \"keywords\" keywords))\r\n  (when uri (add-meta-og-tag \"og:url\" uri))\r\n  (when type (add-meta-og-tag \"og:type\" type))\r\n  (when title (add-meta-og-tag \"og:title\" title))\r\n  (when description (add-meta-og-tag \"og:description\" description))\r\n  (when image (add-meta-og-tag \"og:image\" image)))\r\n\r\n(defn set-title [text]\r\n  (set! (.-title js/document) text))"]}