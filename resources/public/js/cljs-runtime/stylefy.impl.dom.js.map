{"version":3,"sources":["stylefy/impl/dom.cljs"],"mappings":"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","names":["stylefy.impl.dom/stylefy-initialised?","cljs.core.atom","stylefy.impl.dom/styles-in-dom","stylefy.impl.dom/dom-update-requested?","stylefy.impl.dom/styles-as-css","stylefy.impl.dom/keyframes-in-use","stylefy.impl.dom/font-faces-in-use","stylefy.impl.dom/custom-tags-in-use","stylefy.impl.dom/custom-classes-in-use","stylefy.impl.dom/stylefy-node-id","stylefy.impl.dom/stylefy-constant-node-id","stylefy.impl.dom/stylefy-base-node","stylefy.impl.dom/stylefy-instance-id","stylefy.impl.dom/style-by-hash","style-hash","cljs.core/deref","cljs.core.get","stylefy.impl.dom/update-style-tags!","node-stylefy","node-stylefy-constant","styles-in-css","cljs.core.map","cljs.core.comp","cljs.core/keys","keyframes-in-css","cljs.core/vals","font-faces-in-use","custom-tags-in-use","custom-classes-in-use","new-style-constant-css","cljs.core.apply","cljs.core/str","cljs.core.concat","new-style-css","cljs.core._EQ_","dommy.core/text","dommy.core/set-text!","stylefy.impl.dom/mark-all-styles-added-in-dom!","seq__38232","cljs.core/seq","chunk__38233","count__38234","i__38235","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/reset!","stylefy.impl.dom/get-stylefy-node","id","base-node","instance-id","final-id","js/document","dommy.core/selector","stylefy.impl.dom/update-dom","and__4109__auto__","e38236","stylefy.impl.cache.cache_styles","e","js/console","stylefy.impl.cache.clear_styles","stylefy.impl.dom/update-dom-if-requested","stylefy.impl.dom/request-asynchronous-dom-update","c__30811__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__30812__auto__","switch__30717__auto__","state_38239","state_val_38240","inst_38237","cljs.core.async.impl.ioc-helpers/return-chan","statearr-38241","state-machine__30718__auto__","ret-value__30719__auto__","result__30720__auto__","cljs.core/keyword-identical?","ex__30721__auto__","e38242","statearr-38243","statearr-38244","state__30813__auto__","statearr-38245","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","stylefy.impl.dom/check-stylefy-initialisation","p__38246","map__38247","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","stylefy.impl.dom/init-multi-instance","multi-instance","options","js/Error","cljs.core.pr_str","stylefy.impl.dom/init-cache","cljs.core.not_EQ_","stylefy.impl.cache.use_caching_BANG_","cached-styles","stylefy.impl.cache/read-cache-value","stylefy.impl.cache/cache-key-styles","or__4120__auto__","cljs.core/merge","p1__38249#","reagent.core.atom","p__38250","map__38251","stylefy.impl.dom/save-style!","props","hash","style","style-css","stylefy.impl.conversion.style__GT_css","style-to-be-saved","cljs.core.swap_BANG_","cljs.core/assoc","stylefy.impl.dom/style-in-dom?","cljs.core/boolean","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","stylefy.impl.dom/add-keyframes","seq38253","G__38254","self__4717__auto__","identifier","frames","garden-definition","garden.stylesheet/at-keyframes","garden.core.css","stylefy.impl.dom/add-font-face","properties","garden.stylesheet.at_font_face","cljs.core/conj","stylefy.impl.dom/add-tag","name","custom-tag-definition","stylefy.impl.dom/add-class","custom-class-definition","stylefy.impl.conversion/class-selector"],"sourcesContent":["(ns stylefy.impl.dom\n  (:require [dommy.core :as dommy]\n            [reagent.core :as r]\n            [garden.core :refer [css]]\n            [cljs.core.async :refer [<! timeout]]\n            [stylefy.impl.cache :as cache]\n            [stylefy.impl.utils :as utils]\n            [stylefy.impl.conversion :as conversion]\n            [garden.stylesheet :refer [at-media at-keyframes at-font-face]]\n            [clojure.set :as set])\n  (:require-macros\n    [reagent.ratom :refer [run!]]\n    [cljs.core.async.macros :refer [go]]))\n\n(def stylefy-initialised? (atom false))\n(def styles-in-dom (atom {})) ;; style hash -> r/atom with boolean value\n(def ^:private dom-update-requested? (atom false))\n\n(def styles-as-css (atom {})) ;; style hash -> map containing keys: ::css\n\n(def keyframes-in-use (atom {})) ;; keyframe identifier -> css\n(def font-faces-in-use (atom [])) ;; Vector of maps containing keys: ::css\n(def custom-tags-in-use (atom [])) ;; Vector of maps containing keys: ::css\n(def custom-classes-in-use (atom [])) ;; Vector of maps containing keys: ::css\n\n(def ^:private stylefy-node-id \"#_stylefy-styles_\")\n(def ^:private stylefy-constant-node-id \"#_stylefy-constant-styles_\")\n(def ^:private stylefy-base-node (atom nil)) ;; Used when running multiple instances of stylefy on the same page\n(def stylefy-instance-id (atom nil)) ;; Used when running multiple instances of stylefy on the same page\n\n(defn style-by-hash [style-hash]\n  (when style-hash\n    (get @styles-as-css style-hash)))\n\n(defn- update-style-tags!\n  [node-stylefy node-stylefy-constant]\n  (let [styles-in-css          (map (comp ::css style-by-hash) (keys @styles-as-css))\n        keyframes-in-css       (vals @keyframes-in-use)\n        font-faces-in-use      (map ::css @font-faces-in-use)\n        custom-tags-in-use     (map ::css @custom-tags-in-use)\n        custom-classes-in-use  (map ::css @custom-classes-in-use)\n        new-style-constant-css (apply str (concat font-faces-in-use\n                                                  keyframes-in-css\n                                                  custom-tags-in-use\n                                                  custom-classes-in-use))\n        new-style-css          (apply str styles-in-css)]\n    ;; Do not update this node contents if there are no new styles to be added.\n    ;; This is important, because even if setting the same contents should have no effect,\n    ;; it can cause font flickering in some browsers.\n    (when-not (= (dommy/text node-stylefy-constant) new-style-constant-css)\n      (dommy/set-text! node-stylefy-constant new-style-constant-css))\n\n    (dommy/set-text! node-stylefy new-style-css)))\n\n(defn- mark-all-styles-added-in-dom! []\n  (doseq [style-hash (keys @styles-in-dom)]\n    (reset! (get @styles-in-dom style-hash) true)))\n\n(defn- get-stylefy-node [id base-node instance-id]\n  (let [final-id (str id (when instance-id (str instance-id)))]\n    (if (nil? base-node)\n      (dommy/sel1 final-id)\n      (dommy/sel1 base-node final-id))))\n\n(defn update-dom\n  []\n  (let [node-stylefy (get-stylefy-node stylefy-node-id @stylefy-base-node @stylefy-instance-id)\n        node-stylefy-constant (get-stylefy-node stylefy-constant-node-id @stylefy-base-node @stylefy-instance-id)]\n    (if (and node-stylefy node-stylefy-constant)\n      (do (update-style-tags! node-stylefy node-stylefy-constant)\n          (reset! dom-update-requested? false)\n\n          (try\n            (cache/cache-styles @styles-as-css @stylefy-instance-id)\n            (catch :default e\n              (.warn js/console (str \"Unable to cache styles, error: \" e))\n              (cache/clear-styles @stylefy-instance-id)\n              e))\n\n          (mark-all-styles-added-in-dom!))\n      (.error js/console \"stylefy is unable to find the required <style> tags!\"))))\n\n(defn- update-dom-if-requested\n  []\n  (when @dom-update-requested?\n    (update-dom)))\n\n(defn- request-asynchronous-dom-update\n  []\n  (when @stylefy-initialised?\n    (when-not @dom-update-requested?\n      (reset! dom-update-requested? true)\n      (go\n        (update-dom)))))\n\n(defn check-stylefy-initialisation []\n  (when-not @stylefy-initialised?\n    (.warn js/console (str \"use-style called before stylefy was initialised!\"))))\n\n(defn init-multi-instance [{:keys [multi-instance] :as options}]\n  (let [base-node (:base-node multi-instance)\n        instance-id (:instance-id multi-instance)]\n    (assert (or (nil? instance-id)\n                (string? instance-id))\n            (str \"instance-id must be string. Got: \" (pr-str base-node instance-id)))\n    (reset! stylefy-base-node base-node)\n    (reset! stylefy-instance-id instance-id)))\n\n(defn init-cache [options]\n  (when (not= (:use-caching? options) false)\n    (cache/use-caching! (:cache-options options) @stylefy-instance-id)\n\n    (when-let [cached-styles (cache/read-cache-value\n                               (cache/cache-key-styles @stylefy-instance-id))]\n      (reset! styles-as-css (or cached-styles {}))\n      (reset! styles-in-dom (apply merge (map\n                                           ;; Note: r/atom, to be usable in component render methods.\n                                           #(-> {% (r/atom false)})\n                                           (keys cached-styles)))))))\n\n(defn save-style!\n  \"Stores the style in an atom. The style is going to be added into the DOM soon.\"\n  [{:keys [props hash] :as style}]\n  (assert props \"Unable to save empty style!\")\n  (assert hash \"Unable to save style without hash!\")\n  (let [style-css (conversion/style->css style)\n        style-to-be-saved {::css style-css}]\n    (swap! styles-as-css assoc hash style-to-be-saved)\n    (swap! styles-in-dom assoc hash (r/atom false)) ; Note: r/atom, to be usable in component render methods.\n    (request-asynchronous-dom-update)))\n\n(defn style-in-dom? [style-hash]\n  ;; Note: This function does Reagent atom dereference.\n  ;; If called inside a component render method (via use-style), it causes the component to re-render\n  ;; itself if the \"CSS in DOM\" state of this specific style hash is changed.\n  (boolean @(get @styles-in-dom style-hash)))\n\n(defn add-keyframes [identifier & frames]\n  (let [garden-definition (apply at-keyframes identifier frames)]\n    (swap! keyframes-in-use assoc identifier (css garden-definition))\n    (request-asynchronous-dom-update)\n    garden-definition))\n\n(defn add-font-face [properties]\n  (let [garden-definition (at-font-face properties)]\n    (swap! font-faces-in-use conj {::css (css garden-definition)})\n    (request-asynchronous-dom-update)\n    garden-definition))\n\n(defn add-tag [name properties]\n  (let [custom-tag-definition {::tag-name name ::tag-properties properties}]\n    (swap! custom-tags-in-use conj {::css (conversion/style->css\n                                            {:props (::tag-properties custom-tag-definition)\n                                             :custom-selector (::tag-name custom-tag-definition)})})\n    (request-asynchronous-dom-update)\n    custom-tag-definition))\n\n(defn add-class [name properties]\n  (let [custom-class-definition {::class-name name ::class-properties properties}]\n    (swap! custom-classes-in-use conj {::css (conversion/style->css\n                                               {:props (::class-properties custom-class-definition)\n                                                :custom-selector (conversion/class-selector (::class-name custom-class-definition))})})\n    (request-asynchronous-dom-update)\n    custom-class-definition))\n"]}